[gcode_macro HOME]
description: "Performs G28 if all axis are not homed."
gcode:
    {% if printer.toolhead.homed_axes != "xyz" %}
    G28
    {% endif %}
    G1 X175 Y345 Z50
    

[gcode_macro Center]
gcode:
    {% if printer.toolhead.homed_axes != "xyz" %}
    G28
    {% endif %}
    g90


[gcode_macro SET_EXTRUDE_RATE]
variable_parameter_EXTRUDE_RATE: 97
gcode:
   {% set EXTRUDE_RATE = params.EXTRUDE_RATE|default(97)|float %}
   {% if EXTRUDE_RATE < 2 %}    ; this is my catchall in case prevent me from passing the wrong  variable in a slicer. If if is a deciaml value below 2, multiply by 100, otherwise, use value.
     M221 S{EXTRUDE_RATE*100}   ; if Extrude_rate is less than 2, that means it is not in percentage format. So multiply it by 100.  
     M117 { "Slicer setting for Extrude_rate is decimal instead of percentage. Corrected."  }
   {% else %}
     M221 S{EXTRUDE_RATE}       ; if Extrude_rate is greater than 2, that means it is likely already a percentage format. So Set Extrude rate.  
   {% endif %}


## PrusaSlicer gcode - PRINT_START FIRST_TOOL={initial_tool} TOOL_TEMP={first_layer_temperature[initial_tool]} {if is_extruder_used[0]}T0_TEMP={first_layer_temperature[0]}{endif} {if is_extruder_used[1]}T1_TEMP={first_layer_temperature[1]}{endif} {if is_extruder_used[2]}T2_TEMP={first_layer_temperature[2]}{endif} {if is_extruder_used[3]}T3_TEMP={first_layer_temperature[3]}{endif} {if is_extruder_used[4]}T4_TEMP={first_layer_temperature[4]}{endif} {if is_extruder_used[5]}T5_TEMP={first_layer_temperature[5]}{endif}  BED_TEMP=[first_layer_bed_temperature] EXTRUDE_RATE=[extrusion_multiplier]  SKIRT={skirts}
[gcode_macro PRINT_START]   ## From Nate
variable_printing: False
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(65)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|float %}
  {% set EXTRUDER_STBY = params.EXTRUDER_STBY|default(150)|float %}
  {% set EXTRUDE_RATE = params.EXTRUDE_RATE|default(96)|float %}
  {% set CHAMBER = params.CHAMBER|default(60)|int %}
  {% set SKIRT = params.SKIRT|default(1)|int %}
  {% set PA_VALUE = params.PA_VALUE|default(0.034)|float %}
  {% set active_tool = printer.tool_probe_endstop.active_tool_number %}
  {% set initial_tool = params.FIRST_TOOL|default(0)|int %}
  {% set TOOL_TEMP = params.TOOL_TEMP|default(210)|int %}


  #status_printing
  BED_MESH_CLEAR
  M117 Heating bed
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={params.BED_TEMP|float}

  M117 initializing
  SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=printing VALUE=False
  INITIALIZE_TOOLCHANGER
  M117 quad gantry level
  M109 S150 W2; Heat up nozzle to soften any leftover filament for homing.
  
  M117 homing
  
  # If printer is not homed, then home it.
  {% if printer.toolhead.homed_axes != "xyz" %}
    G28
  {% endif %}

  RESPOND TYPE=command MSG="Start QGL"
  QUAD_GANTRY_LEVEL
  G28 Z
  G90

  M190 S{ params.BED_TEMP }
  
  BED_MESH_CALIBRATE
  M117 Heating up first tool

  
  RESPOND TYPE=echo MSG="Current tool {active_tool} set to 0C, {initial_tool} set to {TOOL_TEMP}"
  {% if active_tool == initial_tool %}
      M104 T{active_tool} S{TOOL_TEMP}  # Set target temperature
    {% else %}
      # Cool down the active tool (if different)
      M104 T{active_tool} S0  # Set target temperature to 0
      # Heat up the initial tool
      M104 T{initial_tool} S{TOOL_TEMP}  # Set target temperature
      # Change Tools
      T{initial_tool}
  {% endif %}
  # # This is the Macro provided by the community. I think the above is better, but want to leave this here to test.
  # # Preheat all the hotends in use
  # {% for tool_nr in printer.toolchanger.tool_numbers %}
  #   {% set tooltemp_param = 'T' ~ tool_nr|string ~ '_TEMP' %}
  #   {% if tooltemp_param in params %}
  #     RESPOND TYPE=command MSG="Removed M104 T{tool_nr} S{EXTRUDER_STBY}"
  #     #M104 T{tool_nr} S{EXTRUDER_STBY}
  #   {% endif %}
  # {% endfor %}

  M400
  RESPOND TYPE=command MSG="Next: Wait for extruder to reach temp - M109 S{ params.TOOL_TEMP } W1"
  M109 S{ params.TOOL_TEMP } W1

  RESPOND TYPE=command MSG="Then: Extrude and Purge"
  G92 E0
  #G1 E23 f3600 
  G1 E7 f3600 
  
  # IF SKIRT IS 2 LOOPS OR MORE, THERE IS NO NEED TO PURGE. DEFAULT IS 1, SO IF VARIABLE IS NOT REQUESTED, IT WILL PURGE
  {% if SKIRT < 2 %} 
    LINE_PURGE
  {% endif %}

  START_TOOL_PROBE_CRASH_DETECTION
  SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=printing VALUE=True
  
  RESPOND TYPE=command MSG="Starting Slicer GCode"
  M117 Printing


# [gcode_macro MY_PRINT_START]
# variable_printing: False
# gcode:
# variable_parameter_BED_TEMP: 60
# variable_parameter_EXTRUDER_TEMP: 210
# variable_parameter_CHAMBER: 60
# gcode:        
#   # Parameters
#   ## SuperSlicer - PRINT_START EXTRUDER_TEMP={first_layer_temperature[initial_extruder] + extruder_temperature_offset[initial_extruder]} BED_TEMP={first_layer_bed_temperature} CHAMBER={chamber_temperature} EXTRUDE_RATE={100 * extrusion_multiplier} PRINT_MIN={first_layer_print_min[0]},{first_layer_print_min[1]} PRINT_MAX={first_layer_print_max[0]},{first_layer_print_max[1]} SKIRT={skirts}
#   ## Cura - print_start BED_TEMP={material_bed_temperature_layer_0} EXTRUDER_TEMP={material_print_temperature_layer_0} EXTRUDE_RATE={material_flow_layer_0} CHAMBER={build_volume_temperature} 
#   ##        BED_MESH_CALIBRATE PRINT_MIN=%MINX%,%MINY% PRINT_MAX=%MAXX%,%MAXY%
#   ## OrcaSlicer - PRINT_START EXTRUDER_TEMP=[nozzle_temperature_initial_layer] BED_TEMP=[bed_temperature_initial_layer_single] CHAMBER=[chamber_temperature] EXTRUDE_RATE=[filament_flow_ratio]  PA_VALUE=[pressure_advance] SKIRT=[skirt_loops]
#   ## PrusaSlicer - PRINT_START  FIRST_TOOL={initial_tool} TOOL_TEMP={first_layer_temperature[initial_tool]} {if is_extruder_used[0]}T0_TEMP={first_layer_temperature[0]}{endif} {if is_extruder_used[1]}T1_TEMP={first_layer_temperature[1]}{endif} {if is_extruder_used[2]}T2_TEMP={first_layer_temperature[2]}{endif} {if is_extruder_used[3]}T3_TEMP={first_layer_temperature[3]}{endif} {if is_extruder_used[4]}T4_TEMP={first_layer_temperature[4]}{endif} {if is_extruder_used[5]}T5_TEMP={first_layer_temperature[5]}{endif}  BED_TEMP=[first_layer_bed_temperature] EXTRUDE_RATE=[extrusion_multiplier]  SKIRT={skirts}
#   {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
#   {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(205)|float %}
#   {% set EXTRUDER_STBY = params.EXTRUDER_STBY|default(150)|float %}
#   {% set EXTRUDE_RATE = params.EXTRUDE_RATE|default(96)|float %}
#   {% set CHAMBER = params.CHAMBER|default(60)|int %}
#   {% set SKIRT = params.SKIRT|default(1)|int %}
#   {% set PA_VALUE = params.PA_VALUE|default(0.034)|float %}
#   {% set TOOL = params.TOOL|default(0)|int %}

#   #SET_LED LED=led RED=1 GREEN=0.4 BLUE=0
  
#   #M140 S{ params.BED_TEMP }
#   SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={params.BED_TEMP|float}

#   M117 initializing  
#   SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=printing VALUE=False
#   INITIALIZE_TOOLCHANGER
#   STOP_TOOL_PROBE_CRASH_DETECTION # Initialization starts this if printing, cancel it.
#   M117 homing
  
#   {% if printer.toolhead.homed_axes != "xyz" %}
#     G28
#   {% endif %}
#   #M117 Cleaning the nozzle
#   #_CLEAN_NOZZLE TEMP={ params.TOOL_TEMP|int - 20 }

#   M117 Heating up the bed
#   TEMPERATURE_WAIT SENSOR="heater_bed" MINIMUM={ params.BED_TEMP|float}
#   #M190 S{ params.BED_TEMP }

#   M117 Calibrating bed
#   M109 S150 ; Heat up nozzle to soften any leftover filament for homing.
#   G32 ; Home, gantry tram
#   BED_MESH_CLEAR
#   BED_MESH_CALIBRATE
#   M109 S0 # Stop to heat, the actual printing may happen with a different hotend.

#   # Preheat all the hotends in use
#   {% for tool_nr in printer.toolchanger.tool_numbers %}
#     {% set tooltemp_param = 'T' ~ tool_nr|string ~ '_TEMP' %}
#     {% if tooltemp_param in params %}
#       M104 T{tool_nr} S{params[tooltemp_param]}
#     {% endif %}
#   {% endfor %}

#   #_PARK_ON_COOLING_PAD
#   {% if params.TOOL is defined %}
#     T{params.TOOL}
#     M400
#     M104 T{ params.TOOL } S{ params.EXTRUDER_TEMP }
#     M109 S{ params.EXTRUDER_TEMP }
#   {% endif %}

  
#   {% if EXTRUDE_RATE < 2 %}    ; this is my catchall in case prevent me from passing the wrong  variable in a slicer. If if is a deciaml value below 2, multiply by 100, otherwise, use value.
#     M221 S{EXTRUDE_RATE*100}   ; if Extrude_rate is less than 2, that means it is not in percentage format. So multiply it by 100.  
#     M117 { "Slicer setting for Extrude_rate is decimal instead of percentage. Corrected."  }
#   {% else %}
#     M221 S{EXTRUDE_RATE}       ; if Extrude_rate is greater than 2, that means it is likely already a percentage format. So Set Extrude rate.  
#   {% endif %}

#   M117 Heating up the hotend
#   G90 ; Absolute positioning
#   #G0 X345 Y175 Z1 F3000
#   #G0 Z0.2 F300 ;Move the nozzle down

#   SMART_PARK
#   M109 S{ params.TOOL_TEMP }
#   G0 Z2 F300 ;Move up a bit
#   G92 E0 ; Zero extruder
#   START_TOOL_PROBE_CRASH_DETECTION
#   SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=printing VALUE=True
#   M117 Printing
  
#   {% if SKIRT < 2 %} 
#     LINE_PURGE
#   {% endif %}
  
#   #SET_LED LED=led RED=0.7 GREEN=0.7 BLUE=0.5


[gcode_macro PRINT_END]
gcode:
    STOP_TOOL_PROBE_CRASH_DETECTION
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-7.0 F3600                 ; retract filament

    G91                            ; relative positioning
    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    #   Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 20) %}
        {% set z_safe = 20.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    G0 X{x_safe} Y{y_safe} F20000  ; move nozzle to remove stringing
    G0 Z{z_safe} F3600             ; move nozzle up

    TURN_OFF_HEATERS
    M107                           ; turn off fan
    {% for tool_nr in printer.toolchanger.tool_numbers %}
      {% set tooltemp_param = 'T' ~ tool_nr|string ~ '_TEMP' %}
      {% if tooltemp_param in params %}
        M104 T{tool_nr} S0}
      {% endif %}
    {% endfor %}

    G90                            ; absolute positioning
    {% set tool = printer[printer.toolchanger.tool] %}
    G0 X{tool.params_park_x} Y{tool.params_safe_y} Z300 F3600          ; park nozzle up top
    # M18                            ; Motors off
    M117 Print done
    #SET_LED LED=led RED=0 GREEN=0 BLUE=0


[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
  {% set allow_park = client.park_at_cancel | default(false) | lower == 'true' %}
  {% set retract = client.cancel_retract | default(7.0) | abs %}
  ##### define park position #####
  {% set park_x = "" if (client.park_at_cancel_x | default(175) is none)
            else "X=" ~ client.park_at_cancel_x %}
  {% set park_y = "" if (client.park_at_cancel_y | default(340) is none)
            else "Y=" ~ client.park_at_cancel_y %}
  {% set custom_park = park_x | length > 0 or park_y | length > 0 %}
  ##### end of definitions #####
  # restore idle_timeout time if needed
  {% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
    SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
  {% endif %}
  {% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
  _CLIENT_RETRACT LENGTH={retract}
  TURN_OFF_HEATERS
  M106 S0
  {client.user_cancel_macro | default("")}
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
  # clear pause_next_layer and pause_at_layer as preparation for next print
  SET_PAUSE_NEXT_LAYER ENABLE=0
  SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
  CANCEL_PRINT_BASE


[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
  {% set idle_timeout = client.idle_timeout | default(0) %}
  {% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
  {% set restore = False if printer.toolhead.extruder == ''
              else True  if params.RESTORE | default(1) | int == 1 else False %}
  ##### end of definitions #####
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
  # set a new idle_timeout value
  {% if idle_timeout > 0 %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
    SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
  {% endif %}
  PAUSE_BASE
  {client.user_pause_macro | default("")}
  _TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
variable_last_extruder_temp: {'restore': False, 'temp': 0}
variable_restore_idle_timeout: 0
variable_idle_state: False
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set sp_move = client.speed_move | default(velocity) %}
  {% set runout_resume = True if client.runout_sensor | default("") == ""   # no runout
                    else True if not printer[client.runout_sensor].enabled  # sensor is disabled
                    else printer[client.runout_sensor].filament_detected %} # sensor status
  {% set can_extrude = True if printer.toolhead.extruder == ''           # no extruder defined in config
                  else printer[printer.toolhead.extruder].can_extrude %} # status of active extruder
  {% set do_resume = False %}
  {% set prompt_txt = [] %}
  ##### end of definitions #####
  #### Printer comming from timeout idle state ####
  {% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
    {% if last_extruder_temp.restore %}
      # we need to use the unicode (\u00B0) for the ° as py2 env's would throw an error otherwise
      RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
      M109 S{last_extruder_temp.temp} W1
      {% set do_resume = True %}
    {% elif can_extrude %}
      {% set do_resume = True %}
    {% else %}
      RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
      {% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
    {% endif %}
  #### Printer comming out of regular PAUSE state ####
  {% elif can_extrude %}
    {% set do_resume = True %}
  {% else %}
    RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
    {% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
  {% endif %}
  {% if runout_resume %}
    {% if do_resume %}
      {% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %} # restore idle_timeout time
      {client.user_resume_macro | default("")}
      _CLIENT_EXTRUDE
      RESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}
    {% endif %}
  {% else %}
    RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
    {% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
  {% endif %}
  ##### Generate User Information box in case of abort #####
  {% if not (runout_resume and do_resume) %}
    RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
    {% for element in prompt_txt %}
      RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}'
    {% endfor %}
    RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
    RESPOND TYPE=command MSG="action:prompt_show"
  {% endif %}

# MACROS FROM FLUIDD.CFG
# # Usage: SET_PAUSE_NEXT_LAYER [ENABLE=[0 | 1]] [MACRO=<name>]
# [gcode_macro SET_PAUSE_NEXT_LAYER]
# description: Enable a pause if the next layer is reached
# gcode:
#   {% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
#   {% set ENABLE = params.ENABLE | default(1)|int != 0 %}
#   {% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
#   SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

# # Usage: SET_PAUSE_AT_LAYER [ENABLE=[0 | 1]] [LAYER=<number>] [MACRO=<name>]
# [gcode_macro SET_PAUSE_AT_LAYER]
# description: Enable/disable a pause if a given layer number is reached
# gcode:
#   {% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
#   {% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined
#              else params.LAYER is defined %}
#   {% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}
#   {% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
#   SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

# # Usage: SET_PRINT_STATS_INFO [TOTAL_LAYER=<total_layer_count>] [CURRENT_LAYER= <current_layer>]
# [gcode_macro SET_PRINT_STATS_INFO]
# rename_existing: SET_PRINT_STATS_INFO_BASE
# description: Overwrite, to get pause_next_layer and pause_at_layer feature
# variable_pause_next_layer: { 'enable': False, 'call': "PAUSE" }
# variable_pause_at_layer  : { 'enable': False, 'layer': 0, 'call': "PAUSE" }
# gcode:
#   {% if pause_next_layer.enable %}
#     RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
#     {pause_next_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
#     SET_PAUSE_NEXT_LAYER ENABLE=0
#   {% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}
#     RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
#     {pause_at_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
#     SET_PAUSE_AT_LAYER ENABLE=0
#   {% endif %}
#   SET_PRINT_STATS_INFO_BASE {rawparams}

##### internal use #####
[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set use_custom     = client.use_custom_pos | default(false) | lower == 'true' %}
  {% set custom_park_x  = client.custom_park_x | default(0.0) %}
  {% set custom_park_y  = client.custom_park_y | default(0.0) %}
  {% set park_dz        = client.custom_park_dz | default(2.0) | abs %}
  {% set sp_hop         = client.speed_hop | default(15) * 60 %}
  {% set sp_move        = client.speed_move | default(velocity) * 60 %}
  ##### get config and toolhead values #####
  {% set origin    = printer.gcode_move.homing_origin %}
  {% set act       = printer.gcode_move.gcode_position %}
  {% set max       = printer.toolhead.axis_maximum %}
  {% set cone      = printer.toolhead.cone_start_z | default(max.z) %} ; height as long the toolhead can reach max and min of an delta
  {% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
                else False %}
  ##### define park position #####
  {% set z_min = params.Z_MIN | default(0) | float %}
  {% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}
  {% set x_park = params.X       if params.X is defined
             else custom_park_x  if use_custom
             else 0.0            if round_bed
             else (max.x - 5.0) %}
  {% set y_park = params.Y       if params.Y is defined
             else custom_park_y  if use_custom
             else (max.y - 5.0)  if round_bed and z_park < cone
             else 0.0            if round_bed
             else (max.y - 5.0) %}
  ##### end of definitions #####
  _CLIENT_RETRACT
  {% if "xyz" in printer.toolhead.homed_axes %}
    G90
    G1 Z{z_park} F{sp_hop}
    G1 X{x_park} Y{y_park} F{sp_move}
    {% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
  {% else %}
    RESPOND TYPE=echo MSG='Printer not homed'
  {% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description: Extrudes, if the extruder is hot enough
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
  {% set use_fw_retract = (client.use_fw_retract | default(false) | lower == 'true') and (printer.firmware_retraction is defined) %}
  {% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}
  {% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}
  {% set absolute_extrude = printer.gcode_move.absolute_extrude %}
  ##### end of definitions #####
  {% if printer.toolhead.extruder != '' %}
    {% if printer[printer.toolhead.extruder].can_extrude %}
      {% if use_fw_retract %}
        {% if length < 0 %}
          G10
        {% else %}
          G11
        {% endif %}
      {% else %}
        M83
        G1 E{length} F{(speed | float | abs) * 60}
        {% if absolute_extrude %}
          M82
        {% endif %}
      {% endif %}
    {% else %}
      RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
    {% endif %}
  {% endif %}

[gcode_macro _CLIENT_RETRACT]
description: Retracts, if the extruder is hot enough
gcode:
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
  {% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}
  {% set speed = params.SPEED | default(client.speed_retract) | default(35) %}

  _CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}


[gcode_macro TOOLCHANGE_DEMO]
gcode:
    {% for n in range(20) %}
      T{ printer.toolchanger.tool_numbers | random }
    {% endfor %}

[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    QUAD_GANTRY_LEVEL
    G28 Z

[gcode_macro PRINT_STATUS]
gcode:
  {% set obj = params.OBJ %}
  RESPOND TYPE=echo MSG="Status for M190 {obj} is { printer[obj] }"

[gcode_macro _CLEAN_NOZZLE]
description: Clean nozzle on nozzle cleaning pad.
gcode:
  G90
  RESPOND TYPE=echo MSG="Cleaning nozzle"
  {% set heater =  printer.toolhead.extruder %}
  M104 S{params.TEMP}
  
  G0 X160 Y100 F5000
  G0 X160 Y-4.5 Z5 F5000
  TEMPERATURE_WAIT SENSOR={heater} MINIMUM={params.TEMP}
  M104 S0 # Set temp to 0
  G0 Z0.5
  G0 X120 F5000
  G0 X155 F5000
  G0 X124 F5000
  G0 X121 F5000
  G0 X118 Z1 F5000
  G0 Z0 F5000
  TEMPERATURE_WAIT SENSOR={heater} MAXIMUM=120
  G0 Z20
  G0 Y20

[gcode_macro UNSAFE_LOWER_BED]
description: Lower the bed 100mm without homing
gcode:
  G90
  SET_KINEMATIC_POSITION Z=100
  G0 Z0 F600
  M84

[gcode_macro UNSAFE_RAISE_BED]
description: Raise the bed 100mm without homing
gcode:
  G90
  SET_KINEMATIC_POSITION Z=0
  G0 Z100 F600
  M84


[gcode_macro _TAP_PROBE_ACTIVATE]
description: Ensure safe temp for bed probing
gcode:
    {% set max_temp = 150 %}
    {% set actual_temp = printer[params.HEATER].temperature %}
    {% set target_temp = printer[params.HEATER].target %}
    {% if target_temp > max_temp %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (target_temp, max_temp)) }
        SET_HEATER_TEMPERATURE HEATER={params.HEATER} TARGET={ max_temp|int - 5 }
    {% endif %}
    # Temperature target is already low enough, but nozzle may still be too hot.
    {% if actual_temp > max_temp  + 2 %}
        { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (actual_temp, max_temp)) }
        TEMPERATURE_WAIT SENSOR={params.HEATER} MAXIMUM={ max_temp }
    {% endif %}


[gcode_macro M600] #Filament Change
description: Filament Change 
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state
  
[gcode_macro LOAD_FILAMENT]
gcode:
  M117 Loading
  M104 S240
  G90 ; Absolute pos
  G1 X100 Y00 Z90 F1800 ; Move to center
  M104 S240 ;Heat up the filament
  TEMPERATURE_WAIT SENSOR={printer.toolhead.extruder} MINIMUM=240
  M83                            ; set extruder to relative
  G1 E50 F300                   ; extrude 5 cm
  G1 E50 F300                   ; extrude 5 cm
  G1 E-4 F1800                  ; retract some
  M82                           ; set extruder to absolute
  M400                          ; wait for buffer to clear
  M104 S0                       ; Stop heating
  M117 Loading done

[gcode_macro UNLOAD_FILAMENT]
gcode:
  M117 Unloading
  M104 S240 ;Heat up the filament
  TEMPERATURE_WAIT SENSOR={printer.toolhead.extruder} MINIMUM=240
  M83                           ; set extruder to relative
  G1 E5 F500                   ; extrude 5 mm
  G1 E-50 F1000                   ; retract 5 cm
  G1 E-50 F1000                   ; retract 5 cm
  M82                            ; set extruder to absolute
  M400                          ; wait for buffer to clear
  TURN_OFF_HEATERS
  M117 Unloading done


[gcode_macro UNLOAD_ONE_FILAMENT]
gcode:
  M117 Unloading {params.TOOL}
  M109 T{params.TOOL} S240 W1 ;Wait until heated
  {% set tool_name = printer.toolchanger.tool_names[params.TOOL|int] %}
  {% set extruder = printer[tool_name].extruder %}
  M104 T{params.TOOL} S240 ;Heat up the filament
  TEMPERATURE_WAIT SENSOR={extruder} MINIMUM=240
  ACTIVATE_EXTRUDER EXTRUDER={extruder}
  M83                           ; set extruder to relative
  G1 E5 F500                   ; extrude 5 mm
  G1 E-50 F1000                   ; retract 5 cm
  G1 E-50 F1000                   ; retract 5 cm
  M82                            ; set extruder to absolute
  M400                          ; wait for buffer to clear
  TURN_OFF_HEATERS
  M117 Unloading done

[gcode_macro UNLOAD_ALL_FILAMENT]
gcode:
  {% set tools = printer.toolchanger.tool_names %}
  M117 Unloading
  {% for tool in tools %}
    M104 T{printer[tool].tool_number} S240 ;Heat up the filament
  {% endfor %}
  {% for tool in tools %}
    M109 T{printer[tool].tool_number} S240 W1;Wait until heated
    ACTIVATE_EXTRUDER EXTRUDER={printer[tool].extruder}
    M83                           ; set extruder to relative
    G1 E5 F500                     ; extrude 5 mm
    G1 E-50 F1000                   ; retract 5 cm
    G1 E-50 F1000                   ; retract 5 cm
  {% endfor %}
  M400                          ; Finish all th emoves
  M82                            ; set extruder to absolute
  TURN_OFF_HEATERS
  M117 Unloading done

[gcode_macro CHANGE_NOZZLE]
gcode:
  M117 Nozzle change
  M104 S240
  G90 ; Absolute pos
  G1 X175 Y0 Z100 F1800 ; Move to front
  M109 S240 W1 ;Heat up the filament
  M83                            ; set extruder to relative
  G1 E5 F250                   ; extrude 5 mm
  G1 E-50 F1000                ; retract 5 cm
  M82                            ; set extruder to absolute
  M117 Ready to swap
